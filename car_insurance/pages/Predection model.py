import streamlit as st
import pandas as pd
import joblib
import numpy as np
import zipfile
import io

# Load the model from a ZIP file
with zipfile.ZipFile("car_insurance/Sourse/model.zip", 'r') as z:
    with z.open('model.pkl') as f:  # Replace 'model.pkl' with the actual filename inside the zip
        model = joblib.load(f)
preprocessor = joblib.load("car_insurance/Sourse/preprocessor.pkl")

# Streamlit app title
st.title('Car Insurance Claim Prediction')

# Input fields
policy_tenure = st.number_input("What is the duration of your car insurance policy (in years)?")
age_of_car = st.number_input("What is the age of your car (in years)?")
age_of_policyholder = st.number_input("What is the age of the policyholder (in years)?", min_value=18, value=18)
length = st.number_input("What is the length of your car (in millimeters)?", min_value=1000, value=3000)
width = st.number_input("What is the width of your car (in millimeters)?", min_value=1000, value=1500)
height = st.number_input("What is the height of your car (in millimeters)?", min_value=1000, value=1500)
ncap_rating = st.selectbox("What is the NCAP safety rating of your car?", options=[0, 1, 2, 3, 4, 5], index=0)
segment = st.selectbox("What is the segment of your car?", options=['A', 'B1', 'B2', 'C1', 'C2', 'Utility'], index=0)
fuel_type = st.selectbox("What is the type of fuel does your car use?", options=['CNG', 'Petrol', 'Diesel'], index=0)
max_torque = st.number_input("What is the maximum torque generated by your car (in Nm)?", min_value=0, value=0)
max_power = st.number_input("What is the maximum power generated by your car (in bhp)?", min_value=0, value=0)
airbags = st.selectbox("How many airbags does your car have?", options=[1, 2, 6], index=0)
rear_brakes_type = st.selectbox("What type of rear brakes does your car have?", options=['Drum', 'Disc'], index=0)
cylinder = st.selectbox("How many cylinders does your car engine have?", options=[3, 4], index=1)
transmission_type = st.selectbox("What is the transmission type of your car?", options=['Manual', 'Automatic'], index=0)
gear_box = st.selectbox("How many gears does the gearbox of your car have?", options=[5, 6], index=0)
steering_type = st.selectbox("What type of steering does your car have?", options=['Power', 'Electric', 'Manual'], index=0)
gross_weight = st.number_input("What is the gross weight of your car (in kg)?", min_value=1000, value=1500)
displacement = st.number_input("What is the engine displacement of your car (in cc)?", min_value=500, value=500)
turning_radius = st.number_input("What is the turning radius of your car (in meters)?", min_value=4.5, value=4.5)

# Binary features
is_front_fog_lights = st.radio("Does your car have front fog lights?", ("Yes", "No"))
is_rear_window_wiper = st.radio("Does your car have a rear window wiper?", ("Yes", "No"))
is_rear_window_washer = st.radio("Does your car have a rear window washer?", ("Yes", "No"))
is_rear_window_defogger = st.radio("Does your car have a rear window defogger?", ("Yes", "No"))
is_brake_assist = st.radio("Does your car have brake assist?", ("Yes", "No"))
is_power_door_locks = st.radio("Does your car have power door locks?", ("Yes", "No"))
is_central_locking = st.radio("Does your car have central locking?", ("Yes", "No"))
is_power_steering = st.radio("Does your car have power steering?", ("Yes", "No"))
is_driver_seat_height_adjustable = st.radio("Is the driver’s seat height adjustable?", ("Yes", "No"))
is_day_night_rear_view_mirror = st.radio("Does your car have a day-night rear view mirror?", ("Yes", "No"))
is_ecw = st.radio("Does your car have electronic control windows?", ("Yes", "No"))
is_speed_alert = st.radio("Does your car have a speed alert system?", ("Yes", "No"))
is_esc = st.radio("Does your car have electronic stability control?", ("Yes", "No"))
is_adjustable_steering = st.radio("Is the steering wheel adjustable?", ("Yes", "No"))
is_tpms = st.radio("Does your car have a tire pressure monitoring system?", ("Yes", "No"))
is_parking_sensors = st.radio("Does your car have parking sensors?", ("Yes", "No"))
is_parking_camera = st.radio("Does your car have a parking camera?", ("Yes", "No"))

# Create input DataFrame
input_data = pd.DataFrame({
    'policy_tenure': [policy_tenure],
    'age_of_car': [age_of_car],
    'age_of_policyholder': [age_of_policyholder],
    'length': [length],
    'width': [width],
    'height': [height],
    'ncap_rating': [ncap_rating],
    'segment': [segment],
    'fuel_type': [fuel_type],
    'max_torque': [max_torque],
    'max_power': [max_power],
    'airbags': [airbags],
    'rear_brakes_type': [rear_brakes_type],
    'cylinder': [cylinder],
    'transmission_type': [transmission_type],
    'gear_box': [gear_box],
    'steering_type': [steering_type],
    'gross_weight': [gross_weight],
    'displacement': [displacement],
    'turning_radius': [turning_radius],
    'is_front_fog_lights': [is_front_fog_lights],
    'is_rear_window_wiper': [is_rear_window_wiper],
    'is_rear_window_washer': [is_rear_window_washer],
    'is_rear_window_defogger': [is_rear_window_defogger],
    'is_brake_assist': [is_brake_assist],
    'is_power_door_locks': [is_power_door_locks],
    'is_central_locking': [is_central_locking],
    'is_power_steering': [is_power_steering],
    'is_driver_seat_height_adjustable': [is_driver_seat_height_adjustable],
    'is_day_night_rear_view_mirror': [is_day_night_rear_view_mirror],
    'is_ecw': [is_ecw],
    'is_speed_alert': [is_speed_alert],
    'is_esc': [is_esc],
    'is_adjustable_steering': [is_adjustable_steering],
    'is_tpms': [is_tpms],
    'is_parking_sensors': [is_parking_sensors],
    'is_parking_camera': [is_parking_camera]
})

# One-hot encode input data
#input_data_encoded = pd.get_dummies(input_data)
# Reindex input data to match the feature columns used during training
#input_data_encoded = input_data_encoded.reindex(columns=feature_columns, fill_value=0)
# Scale features
#input_data_scaled = scaler.transform(input_data_encoded)

input_data = preprocessor.transform(input_data)

# Prediction button
if st.button('Predict'):
    # Predict probabilities
    prediction_proba = model.predict_proba(input_data)
    prediction = model.predict(input_data)

    # Display prediction result with a subheader and formatted text
    st.subheader('Prediction Result')

    if prediction[0] == 0:
        st.success('✅ Your customer will NOT make a claim.')
    elif prediction[0] == 1:
        st.error('⚠️ Your customer WILL make a claim.')

    # Display prediction probabilities with a styled subheader
    st.subheader('Prediction Probability')
    st.write(f"**Probability of Not Claiming:** {prediction_proba[0][0]:.2%}")
    st.write(f"**Probability of Claiming:** {prediction_proba[0][1]:.2%}")

